openapi: 3.0.0
info:
  title: Job Archive
  description: API for an archive of job postings.
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/SJhumili/JobArchiveAPI/1.0.0
  description: SwaggerHub API Auto Mocking
security:
- bearerAuth: []
tags:
- name: user
  description: Operations about user
- name: job
  description: Operations about job
paths:
  /user:
    get:
      tags:
      - user
      summary: Get user information
      operationId: getUserByName
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username supplied
        404:
          description: User not found
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: access-token
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        400:
          description: Invalid user supplied
        404:
          description: User not found
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: Successful operation
        400:
          description: Invalid username supplied
        404:
          description: User not found
  /user/signup:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security: []
  /user/login:
    post:
      tags:
      - user
      summary: Logs user into the system and server will respond user's access-token
      operationId: loginUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body'
        required: true
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              style: simple
              explode: false
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              style: simple
              explode: false
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
                example: pong
            application/json:
              schema:
                type: string
                example: pong
        400:
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user
      operationId: logoutUser
      responses:
        200:
          description: User successfully log out.
        401:
          description: Access token is missing or invalid
  /validateEmail:
    get:
      tags:
      - user
      summary: Confirm user's email address
      operationId: confirmemail
      parameters:
      - name: token
        in: query
        description: this token is from backend after sign up
        required: true
        style: form
        explode: true
        schema:
          type: string
        example: awevbbrntye2y53n5467xcvbn35u7mu3456
      responses:
        200:
          description: Email address has been confirmed.
        default:
          description: Something went wrong
  /addjoblink:
    post:
      tags:
      - job
      summary: Post a link
      description: An authenticated user be able to post a link
      operationId: addjoblink
      requestBody:
        description: Job url
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body_1'
        required: true
      responses:
        200:
          description: Job link added successfully.
        401:
          description: Access token is missing or invalid
  /joblinks:
    get:
      tags:
      - job
      summary: Get Job lists
      description: An authenticated user be able to retrieve joblinks
      operationId: getjoblinks
      parameters:
      - name: type
        in: query
        description: if type='all' user be able to retrieve all jobads but not 'all' user will retrieve his own posted jobads
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: all
          enum:
          - all
          - mine
      responses:
        200:
          description: Job links
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: '[http://example.com/job1, http://example.com/job2]'
        401:
          description: Access token is missing or invalid
components:
  schemas:
    User:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
      xml:
        name: User
    body:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    body_1:
      type: object
      properties:
        url:
          type: string
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
